//向页面中注入的js

// 创建一个名为panel的类（仪表板）
class panel {
    // 属性
    title = '';
    defaultValue = '';
    alertNum = 0;
    nowValue = '';
    selector = '';
    valueSelector = '';
    compareValue = '';

    // 构造器
    constructor(title, defaultValue, selector, valueSelector, compareValue) {
        this.title = title;
        this.defaultValue = defaultValue;
        this.selector = selector;
        this.valueSelector = valueSelector;
        this.compareValue = compareValue;
    }

}

// 定义一个空的列表
let panelList = {
    table_panel_container_list: [],
    // singlestat_panel_color_list: [],
    // singlestat_panel_num_list: [],
    // panel_alert_list_list: [],
};

// 触发次数
let alertMaxNum = 7;

// 间隔时间：毫秒
let interval = 10000;

// 语音开关
let voice = true;

// 是否运行
let isRunning = false;

// 私有变量
let _panelHeader = []; //表头
let _panelContent = []; //表内容
let _panelTitle = []; //表标题
let _errorCount = 0; //错误数量


// 事件监听器来处理前端传过来的信息
chrome.runtime.onMessage.addListener(function (message, sender, sendResponse) {

    // 选择要执行的代码块
    switch (message.cmd) {
        case 'getPanelObjects':
            init();
            break;

        case 'start':
            setContentStatus(message.options); //设置和更新面板数据（这是第二次设置面板的数据，相当于修改初始数据了）
            console.log('开始监视', panelList);
            start(); //开始运行
            break;

        case 'restart':
            setContentStatus(message.options);
            console.log('重启监视', message.options);
            restart();
            break;

        case 'restartFromBackground':
            console.log('后台自动获取图表对象');
            init();
            console.log('后台自动启动监视', panelList);
            start();
            break;

        case 'getContentStatus':
            // 兜底的默认值，什么也不做
            break;

        // case 'login':
        // 	console.log('尝试重新登录');
        // 	login(message.tryLoginTimes);
        // 	break;

        default:
            console.log('未知命令', message.cmd);
    }

    // 返回响应
    sendResponse({
        isRunning: isRunning, //第一次返回的时候依然还是false
        alertMaxNum: alertMaxNum, //第一返回的时候出发次数是7
        interval: interval, //第一次返回的时候，时间是10000
        voice: voice, //第一次返回的时候，结果是true
        panelList: panelList, //第一次返回的时候，是一个panelList.table_panel_container_list里装满new_panel对象的结果集
    });
});

// 初始化函数
function init() {
    _panelHeaderList = $(".panel-header.grid-drag-handle"); //找到拥有这个类选择器的所有元素，结果是一个list
    _panelContentList = _panelHeaderList.next(); //找到这些Header元素的下一个元素，也就是Content元素，结果也是一个list类型
    _panelTitleList = $(".panel-title-text", _panelHeaderList); //找到Header元素汇总的title元素
    // panelList = {
    // table_panel_container_list: [], //table面板内容的list
    // singlestat_panel_color_list: [],
    // singlestat_panel_num_list: [],
    // panel_alert_list_list: [],
    // };


    // 获取这个数组的长度
    let length = _panelHeaderList.length;

    // 遍历数组
    for (let i = 0; i < length; i++) {
        // 从多个_panelContent中取到其中的一个对象
        let _onePanelContent = _panelContentList[i];

        // 判断这个对象中是否有多个行
        if (_onePanelContent.innerHTML.indexOf('<div role="row"') > 0) {
            let _firstCellColor = $("[role='row']:eq(1) [role='cell']:last").css(
                "background-color"); //第一行的cell颜色，且只找到table类型的图表
            let _lastCellColor = $("[role='row']:eq(-1) [role='cell']:last").css(
                "background-color"); //最后一行的cell颜色，且只知道table类型的图表

            // 避免第一条就是红色或者空的情况
            let colorList = _firstCellColor.match(/(\d)+/g);
            if (_firstCellColor === undefined || colorList[0] >= 200) {
                _firstCellColor = '';
            }
            ;

            // 颜色比较和识别
            // let compare = function() {
            // 	// 判断颜色不等于空，同时不等于默认值
            // 	if (VS !== undefined && VS !== this.defaultValue) {
            // 		// 调用识别颜色的函数
            // 		return _colorRecognition(VS);
            // 	} else {
            // 		console.log("没有进入到颜色识别里面================================")
            // 	}
            // 	return false;
            // };

            // 比较结果，结果应该是一个布尔类型
            let _compareResult = function () {
                // 判断颜色不等于空，同时不等于默认值
                if ((_firstCellColor !== undefined) && _firstCellColor !== this.defaultValue) {
                    // 调用识别颜色的函数
                    return _colorRecognition(_firstCellColor);
                } else {
                    console.log("没有进入到颜色识别里面================================")
                }
                // 如果if判断没有生效，就直接返回一个false给调用方
                return false;
            };


            let this_title = _panelTitleList[i].innerHTML; //字符串
            let this_defaultValue = _lastCellColor; //初始颜色
            let this_selector = _onePanelContent; //一个对象
            let this_valueSelector = _firstCellColor; //现在颜色
            let this_compareValue = _compareResult; //布尔值

            let new_panel = new panel(this_title, this_defaultValue, this_selector, this_valueSelector,
                this_compareValue);
            panelList.table_panel_container_list.push(new_panel)
            // 继续下一轮循环
            // 经过多次循环panelList里面就会装满东西，具体装在：panelList.table_panel_container_list中，里面的每一个对象都是一个字典类型
        }
    }
}

// 如果颜色不相同，则开始对颜色进行识别
function _colorRecognition(color) {
    let colorList = color.match(/(\d)+/g);
    console.log("很顺利，进入到颜色识别里面了================");
    if ((colorList.length > 3) && (colorList[3] === 0)) {
        return false;
    }
    return ((colorList[0] > 50) && (Math.abs(colorList[1] - colorList[2]) < 200));
}


// 启动监控报警
function start() {
    isRunning = true; //设置为开始状态
    // 定时器：参数一：函数或代码段，参数二：间隔时间interval
    setTimeout(function () {
            // 报警触发函数
            look();
        },
        // 定时器时间间隔
        interval
    );
}

// 重启按钮
function restart() {
    isRunning = true;
    look();
}

const lagencyClass = 'css-1w5pd0q'
const warnningLimit = 5
const warnningList = []
const warnningColor = 'orange'

// 报警触发
function look() {

    const styleDom = document.createElement('style')
    styleDom.innerHTML = `
		.warnning-color {
			background: ${warnningColor}
		}
	`
    document.head.appendChild(styleDom)

    let pannelList = $('.panel-wrapper')
    pannelList = [].slice.call(pannelList)
    pannelList.forEach(item => {
        const pannelTitle = item.querySelector('.panel-title-text').innerText

        let chartsValueCell = item.querySelectorAll('.' + lagencyClass)
        chartsValueCell = [].slice.call(chartsValueCell);
        chartsValueCell.forEach(item => {
            const value = item.innerText
            if (value > warnningLimit) {
                warnningList.push({
                    pannelTitle: pannelTitle,
                    lagency: value
                })
                const originClassName = item.parentNode.getAttribute('class')
                item.parentNode.setAttribute('class', originClassName + ' ' + 'warnning-color')
            }
        })
    })


    console.log(warnningList)

    let _alertPanelList = []; //一个空的list，用来存放报警面板信息
    for (let key in panelList) {
        try {
            // 这里得到的事一个报警面板的list，然后经过concat方法的合并，最终得到一个更大的list然后赋值给alertPanel
            _alertPanelList = _alertPanelList.concat(compare(panelList[
                key])); //concat方法，合并两个或多个数组，此方法不会更改现有数据，而是返回一个新的数组
        } catch (e) {
            console.log(e, '累计异常次数:' + _errorCount);
            if (_errorCount >= alertMaxNum) {
                // 向后台进程发起通信
                chrome.runtime.sendMessage({
                    cmd: "alert",
                    message: {
                        title: '未知异常',
                        message: _errorCount,
                        voice: voice
                    }
                });
                _errorCount = 0;
            } else {
                _errorCount++;
            }
        }
    } //for循环结束

    let length = _alertPanelList.length; //获取大号的报警面板长度
    let alertCount = 0; //新增变量报警计数0

    for (let i = 0; i < length; i++) {
        alertCount += _alertPanelList[i].alertNum; //报警计数加等于所有报警面板中积攒的数字
    }

    // 如果报警总计数大于报警分界线
    if (alertCount >= alertMaxNum) {
        console.log('累计告警次数:' + alertCount);
        let title = '';
        for (let i = 0; i < length; i++) {
            _alertPanelList[i].alertNum = -alertMaxNum * 30;
            title += _alertPanelList[i].title + '，';
        }

        // 向后台进程发起通信
        chrome.runtime.sendMessage({
            cmd: "alert",
            message: {
                title: title,
                message: alertCount,
                voice: voice
            }
        });
    }

    if (isRunning === true) {
        setTimeout("look()", interval);
    }
}

// 图表对象比对
function compare(table_panel_container_list) {
    let length = table_panel_container_list.length; //获取面板集合的长度
    let alertPanel = []; //声明一个空的list，存放报警面板信息

    for (let i = 0; i < length; i++) {
        let _thisPanel = table_panel_container_list[i]; //从list中拿到一个面板
        if (_thisPanel === null) { //如果当前面板信息为空
            continue; //则仅终止当前一次循环
        }
        try {
            // 面板的现在值等于panel对象的VS值
            _thisPanel.nowValue = _thisPanel.valueSelector;

            // 调用panel对象中的compareValue存放的本来就是一个布尔值
            if (_thisPanel.compareValue) {
                if (_thisPanel.alertNum > 0) { //判断报警次数是否大于零
                    alertPanel.push(_thisPanel); //如果报警次数大于零，就在报警面板的list中追加一个面板对象
                }
                _thisPanel.alertNum++; //然后再panel对象的报警次数上+1
                let date = new Date();
                console.log('时间:' + date.toLocaleTimeString() + ' 仪表盘:' + _thisPanel.title + ' 值为:' + _thisPanel
                        .nowValue +
                    ' 累计次数:' + _thisPanel.alertNum);
            } else {
                // 如果panel对象的compareValue()方法返回的事false，则把报警次数强制修改为0
                _thisPanel.alertNum = 0;
            }
        } catch (e) {
            if (_thisPanel.alertNum > 0) {
                alertPanel.push(_thisPanel);
            }
            _thisPanel.alertNum++;
            console.log('数据获取异常：', _thisPanel.alertNum, e);
        }
    }
    // 但会一个报警面板的list
    return alertPanel;
}

// 设置各项参数
function setContentStatus(options) {
    alertMaxNum = options.alertMaxNum;
    interval = options.interval;
    voice = options.voice;
    _updatePanelList(options.panelList);
}

// 更新面板数据（单独的面板数据）
function _updatePanelList(newPanelList) {
    for (let key in newPanelList) {
        if (newPanelList.hasOwnProperty(key)) {
            let length = newPanelList[key].length;
            for (let i = 0; i < length; i++) {
                if (newPanelList[key][i] === null) {
                    panelList[key][i] = null;
                } else {
                    panelList[key][i].defaultValue = newPanelList[key][i];
                }
            }
        }
    }
}


// function login(tryLoginTimes) {
// 	if (2 > tryLoginTimes) {
// 		$('button', $("input[name='password']").parent().next()).click();
// 	} else {
// 		$.post({
// 			url: "/login",
// 			async: true,
// 			data: {
// 				user: "readonly",
// 				email: "",
// 				password: "readonly"
// 			},
// 			done: function(data) {
// 				console.log(data);

// 			}
// 		});
// 	}
// 	setTimeout(function() {
// 		location.reload();
// 	}, 5000);
// }



